// Generated by CoffeeScript 1.9.2

/*!
 * jQuery UI Touch Punch 0.2.3
 *
 * Copyright 2011â€“2014, Dave Furfero
 * Dual licensed under the MIT or GPL Version 2 licenses.
 *
 * Depends:
 *  jquery.ui.widget.js
 *  jquery.ui.mouse.js
 */

(function() {
  (function($) {
    var _mouseDestroy, _mouseInit, mouseProto, simulateMouseEvent, touchHandled;
    $.support.touch = 'ontouchend' in document;
    if (!$.support.touch) {
      return;
    }
    mouseProto = $.ui.mouse.prototype;
    _mouseInit = mouseProto._mouseInit;
    _mouseDestroy = mouseProto._mouseDestroy;
    touchHandled = void 0;

    /**
     * Simulate a mouse event based on a corresponding touch event
     * @param {Object} event A touch event
     * @param {String} simulatedType The corresponding mouse event
     */
    simulateMouseEvent = function(event, simulatedType) {
      var simulatedEvent, touch;
      if (event.originalEvent.touches.length > 1) {
        return;
      }
      event.preventDefault();
      touch = event.originalEvent.changedTouches[0];
      simulatedEvent = document.createEvent('MouseEvents');
      simulatedEvent.initMouseEvent(simulatedType, true, true, window, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);
      event.target.dispatchEvent(simulatedEvent);
    };

    /**
     * Handle the jQuery UI widget's touchstart events
     * @param {Object} event The widget element's touchstart event
     */
    mouseProto._touchStart = function(event) {
      var self;
      self = this;
      if (touchHandled || !self._mouseCapture(event.originalEvent.changedTouches[0])) {
        return;
      }
      touchHandled = true;
      self._touchMoved = false;
      simulateMouseEvent(event, 'mouseover');
      simulateMouseEvent(event, 'mousemove');
      simulateMouseEvent(event, 'mousedown');
    };

    /**
     * Handle the jQuery UI widget's touchmove events
     * @param {Object} event The document's touchmove event
     */
    mouseProto._touchMove = function(event) {
      if (!touchHandled) {
        return;
      }
      this._touchMoved = true;
      simulateMouseEvent(event, 'mousemove');
    };

    /**
     * Handle the jQuery UI widget's touchend events
     * @param {Object} event The document's touchend event
     */
    mouseProto._touchEnd = function(event) {
      if (!touchHandled) {
        return;
      }
      simulateMouseEvent(event, 'mouseup');
      simulateMouseEvent(event, 'mouseout');
      if (!this._touchMoved) {
        simulateMouseEvent(event, 'click');
      }
      touchHandled = false;
    };
    mouseProto._mouseInit = function() {
      var self;
      self = this;
      self.element.bind({
        touchstart: $.proxy(self, '_touchStart'),
        touchmove: $.proxy(self, '_touchMove'),
        touchend: $.proxy(self, '_touchEnd')
      });
      _mouseInit.call(self);
    };
    mouseProto._mouseDestroy = function() {
      var self;
      self = this;
      self.element.unbind({
        touchstart: $.proxy(self, '_touchStart'),
        touchmove: $.proxy(self, '_touchMove'),
        touchend: $.proxy(self, '_touchEnd')
      });
      _mouseDestroy.call(self);
    };
  })(jQuery);

}).call(this);
